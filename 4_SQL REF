CHAPTER 4 : OPERATORS


Set Operators
Set operators combine the results of two component queries into a single result.
Queries containing set operators are called compound queries. Table 4–4 lists SQL set
operators. They are fully described, including examples and restrictions on these
operators, in "The UNION [ALL], INTERSECT, MINUS Operators" on page 9-8.
Table 4–4
Set Operators
Operator Returns
UNION All distinct rows selected by either query
UNION ALL All rows selected by either query, including all duplicates
INTERSECT All distinct rows selected by both queries
MINUS All distinct rows selected by the first query but not the second


CHAPTER 5:

Expression Lists
An expression list is a combination of other expressions.


Expression lists can appear in comparison and membership conditions and in GROUP BY
clauses of queries and subqueries. An expression lists in a comparision or membership
condition is sometimes referred to as a row value constructor or row constructor.
Comparison and membership conditions appear in the conditions of WHERE clauses.
They can contain either one or more comma-delimited expressions or one or more sets
of expressions where each set contains one or more comma-delimited expressions. In
the latter case (multiple sets of expressions):
■ Each set is bounded by parentheses
■ Each set must contain the same number of expressions
■
The number of expressions in each set must match the number of expressions
before the operator in the comparison condition or before the IN keyword in the
membership condition.
A comma-delimited list of expressions can contain no more than 1000 expressions. A
comma-delimited list of sets of expressions can contain any number of sets, but each
set can contain no more than 1000 expressions.


The following are some valid expression lists in conditions:
(10, 20, 40)
('SCOTT', 'BLAKE', 'TAYLOR')
( ('Guy', 'Himuro', 'GHIMURO'),('Karen', 'Colmenares', 'KCOLMENA') )
In the third example, the number of expressions in each set must equal the number of
expressions in the first part of the condition. For example:
SELECT * FROM employees
WHERE (first_name, last_name, email) IN
(('Guy', 'Himuro', 'GHIMURO'),('Karen', 'Colmenares', 'KCOLMENA'))



In a simple GROUP BY clause, you can use either the upper or lower form of expression
list:
SELECT department_id, MIN(salary) min, MAX(salary) max FROM employees
GROUP BY department_id, salary
ORDER BY department_id, min, max;
SELECT department_id, MIN(salary) min, MAX(salary) max FROM employees
GROUP BY (department_id, salary)
ORDER BY department_id, min, max;
In ROLLUP, CUBE, and GROUPING SETS clauses of GROUP BY clauses, you can combine
individual expressions with sets of expressions in the same expression list. The
following example shows several valid grouping sets expression lists in one SQL
statement:
SELECT
prod_category, prod_subcategory, country_id, cust_city, count(*)
FROM products, sales, customers
WHERE sales.prod_id = products.prod_id
AND sales.cust_id=customers.cust_id
AND sales.time_id = '01-oct-00'
AND customers.cust_year_of_birth BETWEEN 1960 and 1970
GROUP BY GROUPING SETS
(
(prod_category, prod_subcategory, country_id, cust_city),
(prod_category, prod_subcategory, country_id),
(prod_category, prod_subcategory),
country_id
)
ORDER BY prod_category, prod_subcategory, country_id, cust_city;




ESCAPE Clause Example The following example searches for employees with the
pattern A_B in their name:
SELECT last_name
FROM employees
WHERE last_name LIKE '%A\_B%' ESCAPE '\'
ORDER BY last_name;


REGEXP_LIKE Condition
REGEXP_LIKE is similar to the LIKE condition, except REGEXP_LIKE performs regular
expression matching instead of the simple pattern matching performed by LIKE. This
condition evaluates strings using characters as defined by the input character set.









EXISTS Condition
An EXISTS condition tests for existence of rows in a subquery.

EXISTS ( subquery )
TRUE if a subquery returns at least one row. 
SELECT department_id
FROM departments d
WHERE EXISTS
(SELECT * FROM employees e
WHERE d.department_id
= e.department_id)
ORDER BY department_id;



